#version 460 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in; // invocations

ORNG_INCLUDE "UtilINCL.glsl"
ORNG_INCLUDE "BuffersINCL.glsl"

layout(binding = 1, rgba16f) writeonly uniform image2D i_output;
layout(binding = 2) uniform usampler3D s_colour;
layout(binding = 3) uniform usampler3D s_density;

vec4 Accumulate(vec3 accum_light, float accum_transmittance, vec3 slice_light, float slice_density, float step_distance, float extinction_coef) {
	slice_density = max(slice_density, 0.000001);
	float slice_transmittance = exp(-slice_density * step_distance * extinction_coef);
	vec3 slice_light_integral = slice_light * (1.0 - slice_transmittance) / slice_density;

	accum_light += slice_light_integral * accum_transmittance;
	accum_transmittance *= slice_transmittance;

	return vec4(accum_light, accum_transmittance);
}

vec3 UnpackVec3(uint val) {
    uint r = (val >> 24);
    uint g = ((val >> 16) & 0x000000FF);
    uint b = ((val >> 8) & 0x000000FF);

    return vec3(r / 255.0, g / 255.0, b / 255.0);
}

vec2 grad( ivec2 z )  // replace this anything that returns a random vector
{
    // 2D to 1D  (feel free to replace by some other)
    int n = z.x+z.y*11111;

    // Hugo Elias hash (feel free to replace by another one)
    n = (n<<13)^n;
    n = (n*(n*n*15731+789221)+1376312589)>>16;

#if 0

    // simple random vectors
    return vec2(cos(float(n)),sin(float(n)));
    
#else

    // Perlin style vectors
    n &= 7;
    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;
    return ( n>=6 ) ? vec2(0.0,gr.x) : 
           ( n>=4 ) ? vec2(gr.x,0.0) :
                              gr;
#endif                              
}


float noise( in vec2 p )
{
    ivec2 i = ivec2(floor( p ));
     vec2 f =       fract( p );
	
	vec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead

    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), 
                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),
                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), 
                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);
}

vec3 Stars(vec3 ray_dir) {
    float theta = atan(ray_dir.y, ray_dir.x);
    float phi = acos(ray_dir.z);

    vec3 col = vec3(0.8 + sin(theta*10.0)*0.2, 0.6 + sin(phi*1000.0)*0.2, 0.8 + cos(phi*10.0)*0.2);
    float n = noise(vec2(theta*200.0, phi*200.0));
    return vec3(n * exp(abs(n - 0.75) * -10.0)) * col;
}

vec3 cSize = vec3(0.7, 0.7, 0.7);

float map(vec3 p) {
	p = p.xzy;
	float scale = 0.6;

	for (int i = 0; i < 16; i++)
	{
		p = 2.0 * clamp(p, -(cSize) , (cSize) ) - p;
		float r2 = dot(p, p);
		float k = max(0.7 / r2, 0.12);
		p *= k;
		scale *= k;
	}

	float l = length(p.xy); 

	float rxy = l - 4.0;
	float n = l * p.z;
	rxy = max(rxy, -(n) * 0.1);

	return rxy / abs(scale);
}

vec3 CalcNormal( in vec3 p ) 
{
    const float h = 0.001;
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*map( p + k.xyy*h ) + 
                      k.yyx*map( p + k.yyx*h ) + 
                      k.yxy*map( p + k.yxy*h ) + 
                      k.xxx*map( p + k.xxx*h ) );
}

vec3 ColourFractal(vec3 p) {
    vec3 op = p;
	p = p.xzy;
	float scale = 0.6;

	for (int i = 0; i < 16; i++)
	{
		p = 2.0 * clamp(p, -(cSize) , (cSize) ) - p;
		float r2 = dot(p, p);
		float k = max(0.7 / r2, 0.12);
		p *= k;
		scale *= k;
	}

	return  max(dot(CalcNormal(op), normalize(vec3(0.5, 0.5, 0.1))), 0) * clamp(mix(abs(p.xzy) * vec3(0.2, 0.001, 0.005) , vec3(0.6) , min(dot(p.xzy, p.yxz), 1.0)), vec3(0), vec3(1))   ;
}

vec3 RaymarchFractal(vec3 start_pos, vec3 ray_dir) {
    float t = 0.1;

    for (int i = 0; i < 128; i++) {
        vec3 step_pos = start_pos + ray_dir * t;
        float d = map(step_pos);

        t += d;

        
        if (d < 0.01) {
            return ColourFractal(step_pos);
        }
    }

    return vec3(0);
}

// hash function              
float hash(float n)
{
    return fract(cos(n) * 114514.1919);
}

float noise3d(in vec3 x)
{
    vec3 p = floor(x);
    vec3 f = smoothstep(0.0, 1.0, fract(x));
        
    float n = p.x + p.y * 10.0 + p.z * 100.0;
    
    return mix(
        mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),
            mix(hash(n + 10.0), hash(n + 11.0), f.x), f.y),
        mix(mix(hash(n + 100.0), hash(n + 101.0), f.x),
            mix(hash(n + 110.0), hash(n + 111.0), f.x), f.y), f.z);
}

mat3 m = mat3(0.00, 1.60, 1.20, -1.60, 0.72, -0.96, -1.20, -0.96, 1.28);

float fbm(vec3 p)
{
    float f = 0.5000 * noise3d(p);
    p = m * p;
    f += 0.2500 * noise3d(p);
   // p = m * p;
    //f += 0.1666 * noise3d(p);
   // p = m * p;
    //f += 0.0834 * noise3d(p);
    return f;
}

float fbm2d(vec2 p)
{
    float theta = 0.1;
    mat2 r = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));

    float f = 0.5000 * noise(p);
    p = r * p;
    f += 0.2500 * noise(p);
   // p = m * p;
    //f += 0.1666 * noise3d(p);
   // p = m * p;
    //f += 0.0834 * noise3d(p);
    return f;
}

vec4 Galaxy(vec3 step_pos) {
    float theta = ubo_common.time_elapsed * 0.0001;

    mat3 rot = mat3(
        cos(theta), 0, sin(theta),
        0, 1, 0,
        -sin(theta), 0, cos(theta)
    );

      mat3 rot2 = mat3(
        cos(-PI*0.15), -sin(-PI*0.15), 0,
        sin(-PI*0.15), cos(-PI*0.15), 0,
        0, 0, 1
    );
    step_pos =   rot  * rot2 * step_pos;
    step_pos *= 1;
    step_pos.y *= 20;
	float fog_density = 0.0;
	vec3 slice_light = vec3(0);


	float ns = fbm(step_pos*0.2);
	float l = dot(step_pos, step_pos);
	fog_density = exp(-l*0.00005) * exp(-clamp(ns, 0.0, 1.0)*3)*0.0005;	
	slice_light += vec3(1.0, 0.2, 0.08) *  exp(-clamp(ns, 0.0, 1.0)*5)*fog_density*exp(-l * 0.0001)*15;
	slice_light += vec3(0.3, 0.5, 1.0) * exp(-l * 0.00035)*0.005;

	return vec4(slice_light, fog_density);
}


void main() {
    if (any(greaterThan(ivec2(gl_GlobalInvocationID.xy), ivec2(imageSize(i_output))))) return;

    vec2 tex_coords = gl_GlobalInvocationID.xy / vec2(imageSize(i_output));

    vec3 ray_dir = normalize(WorldPosFromDepth(1.0, tex_coords) - ubo_common.camera_pos.xyz);

    const float scale = 0.1;

    const float step_length = 2.5*scale;
    const vec3 texture_size = vec3(textureSize(s_colour, 0));
    const float offset = 0*abs(step_length*noise(tex_coords*100000 ));

    vec4 accum = vec4(0, 0, 0, 1);
    uint intersections = 0;
    const float radius = 10.f*scale;
    const float radius2 = radius*radius;

    bool outside = dot(ubo_common.camera_pos.xyz, ubo_common.camera_pos.xyz) > radius2;
    vec3 step_pos;
    for (int i = 0; i < 850; i++) {
            
        step_pos = ubo_common.camera_pos.xyz + ray_dir *( step_length * i + offset);
        vec3 up = normalize(step_pos);
        vec3 right = cross(ray_dir, up);
        mat3 basis = mat3(
            right.x, right.y, right.z,
            up.x, up.y, up.z,
            ray_dir.x, ray_dir.y, ray_dir.z
        );
        
        float theta = -0.3*scale / length(step_pos);
        float ray_dif = acos(dot(ray_dir, normalize(-step_pos)));
        theta = min(ray_dif, theta);

        mat3 rot_x = mat3(
            1, 0, 0,
            0, cos(theta), -sin(theta), 
            0, sin(theta), cos(theta)
        );

        //ray_dir = normalize((basis * rot_x) * inverse(basis) * ray_dir);

        ivec3 sample_coord = ivec3(step_pos * 3.0 + texture_size / 2);
        
       if (any(greaterThan(sample_coord, ivec3(texture_size))) || any(lessThan(sample_coord, ivec3(0))))
            continue;
        
        float l2 = dot(step_pos, step_pos);
        if (outside && l2 < radius2) {
           outside = false;
            intersections++;
            break;
        } else if (!outside && l2 > radius2) {
            outside = true;
            intersections++;
            break;
        }
        //vec4 col = Galaxy(step_pos/scale) * max((l2 - 5000.0 * scale), 0) * 0.03*scale;
	    //accum = Accumulate(accum.rgb, accum.a, col.rgb, col.a, step_length, 0.15);
        vec3 slice_light = UnpackVec3(texelFetch(s_colour, sample_coord, 0).r) * 0.15*10;
        uint density = texelFetch(s_density, sample_coord, 0).r;
        float vol_density = density == 0 ? 0.0 : log(density) / density * 100;
		accum = Accumulate(accum.rgb, accum.a, slice_light, vol_density, step_length, 0.5);
    }
    
    vec3 bg_col = Stars(ray_dir) * (intersections > 0 ? vec3(0.0) : vec3(1, 1, 1));
    // if (intersections > 0) {
    //    bg_col = RaymarchFractal(step_pos + vec3(0, 5, 10), ray_dir);
    // } else {
    //     bg_col = Stars(ray_dir);
    // }
    //vec3 bg_col = vec3(max(sin(ray_dir.x*100)+sin(ray_dir.y*100), 0))*0.1;
    imageStore(i_output, ivec2(gl_GlobalInvocationID.xy), vec4(accum.rgb * (1.0 - accum.a) + bg_col * accum.a, 1.0));
}
