#version 460 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in; // invocations

layout(binding = 0, r32ui) uniform uimage3D out_density;
layout(binding = 1, r32ui) uniform uimage3D out_colour;

ivec3 ClampCoord(ivec3 coord) {
    return clamp(coord, ivec3(0), ivec3(imageSize(out_density)));
}

vec2 AffineTransform(vec2 coord) {
    float l2 = dot(coord, coord);
    return vec2(coord.x * sin(l2) - coord.y * cos(l2), coord.x * cos(l2) + coord.y * sin(l2));
}

#define PI 3.14
vec3 Popcorn(vec3 coord, float c, float d, float e) {
    return vec3(c*coord.x + sin(tan(3*coord.y)), d*coord.y + sin(tan(3*coord.z)), e*coord.z + sin(tan(3*coord.x)));
}

vec3 Horseshoe(vec3 c) {
    return vec3((c.x - c.y) * (c.x + c.y), 2 * c.z * c.y, 2 * c.x * c.z) / length(c);
}

vec3 Sinusoidal(vec3 c) {
    return sin(c);
}

// vec2 RotateTransform(vec2 coord, float theta) {
//    theta = (theta + 90.0) * PI / 180.0;
//     mat2 rotation = mat2(
//         cos(theta), -sin(theta),
//         sin(theta), cos(theta)
//     );

//     return rotation * coord;
// }

vec3 RotateTransform(vec3 coord, float theta) {
    mat3 r = mat3(
        cos(theta), 0, sin(theta),
        0, 1, 0,
        -sin(theta), 0, cos(theta)
    );

   return r * coord;
}


float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

uint PackVec3(vec3 c) {
    uint r = uint(min(c.r * 255.0, 255.0));
    uint g = uint(min(c.g * 255.0, 255.0));
    uint b = uint(min(c.b * 255.0, 255.0));
    uint col_bits = 0;
    col_bits = col_bits | (r << 24);
    col_bits = col_bits | (g << 16);
    col_bits = col_bits | (b << 8);

    return col_bits;
}

vec3 UnpackVec3(uint val) {
    uint r = (val >> 24);
    uint g = ((val >> 16) & 0x000000FF);
    uint b = ((val >> 8) & 0x000000FF);

    return vec3(r / 255.0, g / 255.0, b / 255.0);
}

vec3 opRepetition( in vec3 p, in vec3 s )
{
    vec3 q = p - s*round(p/s);
    return q;
}
vec3 f0(vec3 coord) {
    coord = RotateTransform(coord, PI * 0.25);
    return coord;
}

vec3 f1(vec3 coord) {
    coord = Popcorn(coord, 1, 0.5, 0.1);
    coord.xy = AffineTransform(coord.xy);
    coord = Popcorn(coord, 1, 0.5, 0.1);

    return coord;
}

vec3 f2(vec3 coord) {
    coord = Horseshoe(coord*0.1*tan(coord.x*0.01));

    return coord;
}

vec3 f3(vec3 coord) {
    coord = sin(coord*7);

    return coord;
}

vec3 FinalTransform(vec3 coord) {
   coord = RotateTransform(coord, PI*0.5);
    return fract(coord) * 2.0 - 1.0;
}

vec3 Ifs(vec3 coord) {
    const float probabilities[] = {0.05, 0.05, 0.15, 0.125};
    float cdf[4];

    {
        float sum = 0.f;
        for (int i = 0; i < 4; i++) {
            sum += probabilities[i];
            cdf[i] = sum;
        }
    }

    // Converge a bit first
    for (uint i = 0; i < 20; i++) {
        float r = rand(vec2(coord.x + sin(coord.z*263466.378263), coord.y + i));

        if (r < cdf[0]) {
            coord = f0(coord);
        }
        else if (r < cdf[1]) {
            coord = f1(coord);
        }
        else if (r < cdf[2]) {
            coord = f2(coord);
        } else if (r < cdf[3]) {
            coord = f3(coord);
        }

        coord = FinalTransform(coord);
    } 

    for (uint i = 0; i < 50; i++) {
        float r = rand(vec2(coord.x + sin(coord.z*263466.378263), coord.y + i + 50));
        vec3 col;

        if (r < cdf[0]) {
            coord = f0(coord);
            col = vec3(0.5);
        }
        else if (r < cdf[1]) {
            coord = f1(coord);
            col = vec3(0.1, 0.3, 0.8);
        }
        else if (r < cdf[2]) {
            coord = f2(coord);
            col = vec3(0.8, 0.0, 0.0);
        } else if (r < cdf[3]) {
            coord = f3(coord);
            col = vec3(0.2, 0.2, 0.6);
        }

        coord = FinalTransform(coord);
        ivec3 write_coord = ivec3((coord + 1.0) * 0.5 * vec3(imageSize(out_colour)));

        if (any(lessThan(write_coord, vec3(0))) || any(greaterThan(write_coord, imageSize(out_colour)))) continue;

        uint val = imageAtomicOr(out_colour, write_coord, 0u);
        vec3 pixel_col = UnpackVec3(val);
        pixel_col = (pixel_col + col) * 0.5;
        val = PackVec3(pixel_col);
        imageAtomicOr(out_colour, write_coord, val);
        imageAtomicAdd(out_density, write_coord, 1);
    }

    return coord;
}

void main() {
#ifdef CLEAR
    imageStore(out_density, ivec3(gl_GlobalInvocationID.xyz), uvec4(0));
    imageStore(out_colour, ivec3(gl_GlobalInvocationID.xyz), uvec4(0));
#else
    vec3 coord = gl_GlobalInvocationID.xyz / vec3(imageSize(out_density));

    // TODO: fix aspect ratio
    coord = 2.0 * (coord - 0.5);
    Ifs(coord);
#endif
}